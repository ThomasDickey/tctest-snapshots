dnl Process this file with autoconf to produce a configure script.
AC_REVISION($Revision: 1.14 $)
AC_PREREQ(2.52.20210105)
rm -f config.cache

dnl
AC_INIT(tctest.c)
AC_CONFIG_HEADER(config.h:config_h.in)

CF_CHECK_CACHE
AC_ARG_PROGRAM

CF_PROG_CC
AC_PROG_CPP

CF_PROG_EXT
CF_PROG_LINT
AC_CONST
AC_C_INLINE
CF_XOPEN_SOURCE
CF_WITHOUT_X

CF_MAKEFLAGS
AC_PROG_INSTALL

AC_PROG_MAKE_SET
CF_DISABLE_ECHO

AC_STDC_HEADERS
AC_HEADER_DIRENT

AC_CHECK_HEADERS( \
tic.h \
)

AC_LONG_FILE_NAMES

AC_MSG_CHECKING(if we have identified curses libraries)
AC_TRY_LINK([#include <curses.h>],
	[initscr(); tgoto("?", 0,0)],
	cf_result=yes,
	cf_result=no)
AC_MSG_RESULT($cf_result)

# Do not use CF_WITH_NCURSES_ETC, since we need *termcap*, not *curses*.
if test "$cf_result" = no ; then
	cf_cv_screen=auto

	AC_MSG_CHECKING(for specified curses/termcap library type)
	AC_ARG_WITH(ncursesw,
		[  --with-ncursesw         use wide ncurses-libraries],
		[cf_cv_screen=ncursesw],[

	AC_ARG_WITH(ncurses,
		[  --with-ncurses          use ncurses-libraries],
		[cf_cv_screen=ncurses],[

	AC_ARG_WITH(curses,
		[  --with-curses           use curses-libraries rather than termcap],
		[cf_cv_screen=curses],[

	AC_ARG_WITH(curses-colr,
		[  --with-curses-colr      compile/link with HPUX 10.x color-curses],
		[cf_cv_screen=curses_colr],[

	AC_ARG_WITH(curses-5lib,
		[  --with-curses-5lib      compile/link with SunOS 5lib curses],
		[cf_cv_screen=curses_5lib])])])])])

	AC_MSG_RESULT($cf_cv_screen)

	cf_cv_termlib=terminfo

	case $cf_cv_screen in
	curses|curses_*)
		CF_CURSES_CONFIG
		;;
	ncurses)
		CF_NCURSES_CONFIG
		;;
	ncursesw)
		cf_cv_libtype=w
		CF_NCURSES_CONFIG(ncursesw)
		;;
	*)
		AC_CHECK_LIB(otermcap, tgetent,
			[CF_ADD_LIBS(-lotermcap)
			 cf_cv_termlib=termcap],
			[AC_CHECK_LIB(termcap, tgetent,
				[CF_ADD_LIBS(-ltermcap)
				 cf_cv_termlib=termcap],
				[CF_TERMCAP_LIBS
				 CF_FUNC_TGETENT])])
		;;
	esac
fi

CF_BROKEN_TGETENT_STATUS

cf_tc_funcs=""
cf_tc_externs=""
if test ".$cf_cv_termlib" = .terminfo ; then
	AC_DEFINE(USE_TERMINFO)
	CF_VERBOSE(will use termcap-interface)
elif test ".$cf_cv_termlib" = .termcap ; then
	# BSD 'tputs()' may need 'PC' to be set.
	AC_TRY_LINK([],[extern char PC; PC = 0],
		[AC_DEFINE(HAVE_EXTERN_TCAP_PC)])
	cf_tc_funcs="$cf_tc_funcs tgetint tgetnum tparam tparm"
	cf_tc_externs="$cf_tc_funcs tgoto tgetstr tputs tgetent tgetflag"
else
	cf_cv_termlib=none
fi

AC_HAVE_FUNCS($cf_tc_funcs _nc_infotocap unsetenv use_env _nc_leaks_tic _nc_freeall)

CF_LARGEFILE

###	Debugging/development options
CF_WITH_NO_LEAKS
CF_WITH_WARNINGS(Wno-unknown-pragmas)

CF_CURSES_TERM_H

if test ".$cf_cv_termlib" != ".none"
then
	CF_TYPE_OUTCHAR
fi

if test -n "$cf_tc_externs"
then
	CF_MISSING_EXTERN($cf_tc_externs)
fi

CF_WITH_MAN2HTML
CF_MAKE_TAGS
CF_DISABLE_RPATH_HACK

###	output makefile and config.h
AC_OUTPUT(makefile,,,sort)
CF_MAKE_DOCS(tctest,1)
